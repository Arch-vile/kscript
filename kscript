#!/bin/bash

KSCRIPT_VERSION=1.0


## Show basic CLI description if no arguments are provided
if [ $# == 0 ]  || [ $1 == "-v" ] || [ $1 == "--version" ] || [ $1 == "-h" ] || [ $1 == "--help" ]; then
    echo "Usage     : kscript <scriptfile or - for stdin> [<script_args>]*" >&2
    echo "Usage     : kscript --clear-jar-cache" >&2
    echo "" >&2
    echo "Easy-to-use scripting support for Kotlin on *nix-based systems." >&2
    echo "" >&2
    echo "Copyright : 2016 Holger Brandl"
    echo "License   : Simplified BSD" >&2
    echo "Version   : v$KSCRIPT_VERSION" >&2
    echo "Website   : https://github.com/holgerbrandl/kscript" >&2
    exit 1;
fi

## optionally clear up jar cache
if [ $1 == "--clear-jar-cache" ]; then
    echo "Cleaning up jar cache..."
    rm -f ${TMPDIR}/.kscript*jar
    exit 0
fi

## ... or use a cached version of it if possible
#scriptFile="./test.kts"
scriptFile=$1
shift


## work around missing md5sum on mac
if [ "${OSTYPE//[0-9.]/}" == "darwin" ]; then md5sum(){ md5 -r $1; }; fi


## If script is provided from stdin create a temporary file
## note we cannot  support empty args list here because this would confuse with actual script args
if [ "$scriptFile" == "-" ]; then scriptFile="/dev/stdin"; fi
#if [ "$scriptFile"=="/dev/stdin" ]; then

## Rather Test if script ends with kts to also support process substitution here. Wrap stdin
# http://serverfault.com/questions/52034/what-is-the-difference-between-double-and-single-square-brackets-in-bash
# https://viewsby.wordpress.com/2013/09/06/bash-string-ends-with/

if [[ "$scriptFile" != *kts ]]; then
    tmpScript=${TMPDIR=/tmp}/kscript_stdin_${RANDOM}${RANDOM}.kts # odd but works on macos as well
    cat "${scriptFile}" > ${tmpScript}

    ## rename to use checksum as name to allow for jar-caching also when using stdin
    stdinMD5=$(md5sum ${tmpScript} | cut -c1-6)

    ## replace script file with md5 hash file copy of stdin
    scriptFile=$(dirname ${tmpScript})/kscript_stdin_${stdinMD5}.kts
    mv ${tmpScript} $scriptFile
fi



### auto-install expandcp.kts into same dir as kscript for automatic dependency resolution if not yet in PATH
if ! which expandcp.kts &> /dev/null; then
    installDir=$(dirname $(which kscript))
    curl -s https://raw.githubusercontent.com/holgerbrandl/kscript/master/expandcp.kts > ${installDir}/expandcp.kts
    chmod u+x ${installDir}/expandcp.kts
fi

dependencies=$(grep -F "//DEPS" ${scriptFile} | head -n1 | cut -f2- -d' ' | tr ',;' ' ')
kotlin_opts=$(grep -F "//KOTLIN_OPTS" ${scriptFile} | head -n1 | cut -f2- -d' ')

#dependencies=" org.docopt:docopt:0.6.0-SNAPSHOT log4j:log4j:1.2.14 "

if [ -n "$dependencies" ]; then
    classpath=$(expandcp.kts ${dependencies})
    if [ $? -eq 1 ]; then exit 1; fi
fi

#echo "used classpath is ${classpath}"

scriptCheckSum=$(md5sum $scriptFile | cut -c1-6)

## we can use readlink here which is not functional on macos, thus:
# http://stackoverflow.com/questions/3915040/bash-fish-command-to-print-absolute-path-to-a-file
abspath() { echo "$(cd "$(dirname "$1")"; pwd)/$(basename "$1")"; }
jarDir=$(dirname $(abspath  ${scriptFile}))     # see https://github.com/holgerbrandl/kscript/issues/5
jarFile=${jarDir}/.$(basename ${scriptFile} .kts).${scriptCheckSum}.jar


## capitalize first letter (since this is what kotlin compiler is doing for the wrapper
className=$(basename ${scriptFile} .kts)
#className="${className^}" ## disabled because requires bash4 and thus not on macos
className=$(echo ${className:0:1} | tr  '[a-z]' '[A-Z]')${className:1}


# build cache-jar if it does not yet exist
if [ ! -f "${jarFile}" ]; then
    ## remove previous (now outdated) cache jars
    rm -f .$(basename ${scriptFile} .kts).*.jar

    kotlinc  -classpath "${classpath}" -d ${jarFile} ${scriptFile}

    if [ $? -eq 1 ]; then
        echo "ERROR: compilation of '$scriptFile' failed" >&2
        exit 1;
    fi


    mainJava=$(mktemp -dt kscript.XXXXXX)/Main_${className}.java

    echo '
    public class Main_'${className}' {
        public static void main(String... args) throws Exception {
            Class script = Main_'${className}'.class.getClassLoader().loadClass("'$className'");
            script.getDeclaredConstructor(String[].class).newInstance((Object)args);
        }
    }
    '> ${mainJava}

    ## prefer JAVA_HOME over PATH for javac and jar (to stay in sync with kotlinc; see  #6)
    if [ -n "$JAVA_HOME" -a -x "$JAVA_HOME/bin/java" ]; then
        JAVAC_CMD="$JAVA_HOME/bin/javac"
        JAR_CMD="$JAVA_HOME/bin/jar"
    fi

    ${JAVAC_CMD:=javac} ${mainJava}  2> /dev/null

    ## update the jar to include main-wrapper
    (cd $(dirname ${mainJava}) && ${JAR_CMD:=jar} uf ${jarFile} $(basename ${mainJava%%.java}.class))
fi


## disabled since kotlin binary fails to add kotlin-stdb when using jar as sole argument
## update manifest to specify main class
#echo "Main-Class: Main_${className}" > ${mainJava}.manimain
#jar ufm ${jarFile} ${mainJava}.manimain
#jar tf ${jarFile}

echo KOTLIN_OPTS are ${kotlin_opts}
exec kotlin ${kotlin_opts} -classpath ${jarFile}:"$classpath" Main_${className} "$@"
