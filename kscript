#!/bin/bash

### auto-install expandcp.kts into same dir as kscript for automatic dependency resolution if not yet in PATH
if ! which expandcp.kts &> /dev/null; then
    installDir=$(dirname $(which kscript))
    curl -s https://raw.githubusercontent.com/holgerbrandl/kscript/master/expandcp.kts > ${installDir}/expandcp.kts
    chmod u+x ${installDir}/expandcp.kts
fi

dependencies=$(grep -F "//DEPS" $1 | head -n1 | cut -f2- -d' ' | tr ',;' ' ')
#dependencies=" org.docopt:docopt:0.6.0-SNAPSHOT log4j:log4j:1.2.14 "

if [ -n "$dependencies" ]; then
    classpath=$(expandcp.kts ${dependencies})
    if [ $? -eq 1 ]; then exit 1; fi
fi

## directly run the script...
#echo kotlinc -script -classpath "$classpath" "$@"

## ... or use a cached version of it if possible
#scriptFile="./test.kts"
scriptFile=$1
shift

## work around missing md5sum on mac
if [ "${OSTYPE//[0-9.]/}" == "darwin" ]; then md5sum(){ md5 -r $1; }; fi

scriptCheckSum=$(md5sum $scriptFile | cut -c1-6)

## we can use readlink here which is not functional on macos, thus:
# http://stackoverflow.com/questions/3915040/bash-fish-command-to-print-absolute-path-to-a-file
abspath() { echo "$(cd "$(dirname "$1")"; pwd)/$(basename "$1")"; }
jarDir=$(dirname $(abspath  ${scriptFile}))     # see https://github.com/holgerbrandl/kscript/issues/5
jarFile=${jarDir}/.$(basename ${scriptFile} .kts).${scriptCheckSum}.jar


## capitalize first letter (since this is what kotlin compiler is doing for the wrapper
className=$(basename ${scriptFile} .kts)
#className="${className^}" ## disabled because requires bash4 and thus not on macos
className=$(echo ${className:0:1} | tr  '[a-z]' '[A-Z]')${className:1}


# build cache-jar if it does not yet exist
if [ ! -f "${jarFile}" ]; then
    ## remove previous (now outdated) cache jars
    rm -f .$(basename ${scriptFile} .kts).*.jar

    kotlinc  -classpath "${classpath}" -d ${jarFile} ${scriptFile}

    if [ $? -eq 1 ]; then
        echo "ERROR: compilation of '$scriptFile' failed" >&2
        exit 1;
    fi


    mainJava=$(mktemp -dt kscript.XXXXXX)/Main_${className}.java

    echo '
    public class Main_'${className}' {
        public static void main(String... args) throws Exception {
            Class script = Main_'${className}'.class.getClassLoader().loadClass("'$className'");
            script.getDeclaredConstructor(String[].class).newInstance((Object)args);
        }
    }
    '> ${mainJava}

    javac ${mainJava}  2> /dev/null

    ## update the jar to include main-wrapper
    (cd $(dirname ${mainJava}) && jar uf ${jarFile}  $(basename ${mainJava%%.java}.class))
fi


## disabled since kotlin binary fails to add kotlin-stdb when using jar as sole argument
## update manifest to specify main class
#echo "Main-Class: Main_${className}" > ${mainJava}.manimain
#jar ufm ${jarFile} ${mainJava}.manimain
#jar tf ${jarFile}

exec kotlin -classpath ${jarFile}:"$classpath" Main_${className} "$@"
